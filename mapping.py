"""CSC111 Winter 2021 Project: MTR Journey Times, Part 3: Mapping

Note: Some of this code has been taken from a1 of the CSC111 materials. This code has been modified
to suit the needs of this program.

This program generates the positions for the click boxes and is simply a tool used to
reset/create click boxes that are to be used in the main program later to detect which station
has been clicked.

Copyright and Usage Information
===============================

All forms of distribution of this code, whether as given or with any changes, are
expressly prohibited. For more information on copyright for CSC111 materials,
please consult our Course Syllabus.


This file is Copyright (c) 2021 Vijay Sambamurthy.
"""
import csv

import pygame
from pygame.color import THECOLORS

from data_collection import load_utf8_csv
from visualization import draw_mappings, draw_text, initialize_screen


def write_mappings(mappings: list[tuple[int, int]], filename: str) -> None:
    """Once the mappings have been generated by the run_mapper, this function will store that
    data into a csv.

    mappings: result of run_mapper
    filename: file to write out data to
    """
    with open(filename, 'w+', newline='') as file:
        writer = csv.writer(file, delimiter=',')
        writer.writerow(["X Pos", "Y Pos"])
        for row in mappings:
            writer.writerow(row)
    file.close()


def handle_click(event: pygame.event, counter: int, mappings: list[tuple[int, int]]) -> int:
    """This is a subprogram that handles the clicks generated in run_mapper by pygame.
    On left click, it places the box for the displayed station at the current cursor's location.
    On right click, it undoes the last box that was placed (in case mistakes are made).

    counter: the current counter used to keep track of which station is currently being mapped to.
    mappings: the ongoing mappings which contain the positions of the boxes

    return (int): the counter value after the event has been processed.

    Preconditions:
        - counter >= 0
    """
    if event.button == 3:
        # Undo if right click
        if counter > 0:
            mappings.pop()
            counter -= 1
    if event.button == 1:
        mappings.append(event.pos)
        counter += 1
    return counter


def run_mapper(data: list[str]) -> None:
    """ Run the mapper program.

    Modified version of run_visualization from a1 of CSC111 course.

    This function shows a picture of the MTR map and displays the current station that is to be
    mapped to at the bottom left. For example, if the program wants to know where to place the
    click box for Tung Chung station, it will say in the bottom left: "Please select: Tung Chung
    station". Then the user is required to left click where they would like the top left corner of
    the click box for Tung Chung station to be.

    Once all stations have been mapped to, the data is then written out to a csv file.

    data: an input which contains every station read in order from the data that is to be used
    in main.py. (However, duplicate stations here are ignored so that there are not multiple click
    boxes per station) This order will match up with main because they use the same file.
    """
    # initialize variables
    image = pygame.image.load(r'data/mtrmap.png')
    mappings = []
    counter = 0
    screen_size = (image.get_width(), image.get_height() + 100)
    screen = initialize_screen(screen_size, [pygame.MOUSEBUTTONDOWN], "Calibration")

    text = "Please select: " + data[counter]

    while True:
        # Draw the MTR (on a white background)
        screen.fill(THECOLORS['white'])
        screen.blit(image, (0, 0))
        draw_mappings(screen, mappings)

        # Information text for users.
        draw_text(screen, text, (20, image.get_height() + 20))
        draw_text(screen, "Left mouse - select, Right mouse - Undo", (image.get_width() - 400,
                                                                      image.get_height() + 20))
        pygame.display.flip()

        # Wait for an event (either pygame.MOUSEBUTTONDOWN or pygame.QUIT)
        event = pygame.event.wait()

        if event.type == pygame.MOUSEBUTTONDOWN:
            if counter < len(data) - 1:
                counter = handle_click(event, counter, mappings)
                text = "Please select: " + data[counter]
            elif counter == len(data) - 1:
                # If the last station is about to be mapped to, this branch will be called.
                # This prevents a call to data[counter], where counter will be equal to len(data)
                counter = handle_click(event, counter, mappings)

                # Write out mappings to csv file.
                write_mappings(mappings, "data/coord_mappings.csv")
                text = "Data has been written out."
            else:
                # Ignore user actions after the csv has been written to.
                text = "No action performed."
        elif event.type == pygame.QUIT:
            break

    pygame.display.quit()


if __name__ == "__main__":
    # Load the csv data
    data = load_utf8_csv("data/modified_lines_and_stations.csv")

    stations = []

    # Eliminate duplicates and only consider the station name (retaining order)
    for val in data:
        temp = val[5] + " station"
        if temp not in stations:
            stations.append(temp)

    # Run the mapper
    run_mapper(stations)
