"""CSC111 Winter 2021 Project: MTR Journey Times, Supporting Material: Visualization.

Note: Some of this code has been taken from a1 of the CSC111 materials. This code has been modified
to suit the needs of this program.

Info: A click box is a specific area for which this program will see if a click happened.

Copyright and Usage Information
===============================

All forms of distribution of this code, whether as given or with any changes, are
expressly prohibited. For more information on copyright for CSC111 materials,
please consult our Course Syllabus.

This file is Copyright (c) 2021 Vijay Sambamurthy.
"""
from pygame.colordict import THECOLORS
import pygame

# Size of click boxes
SQUARE_SIZE = 30


def initialize_screen(screen_size: tuple[int, int], allowed: list, name: str) -> pygame.Surface:
    """Initialize pygame and the display window.

    screen_size: is the size of the screen in the form (width, height)
    allowed: is a list of pygame event types that should be listened for while pygame is running.
    name: is the name of the window that is later set during init.

    pygame.Surface object is returned
    """
    pygame.display.init()
    pygame.font.init()
    screen = pygame.display.set_mode(screen_size)
    screen.fill(THECOLORS['white'])
    pygame.display.flip()
    pygame.display.set_caption(name)
    pygame.event.clear()
    pygame.event.set_blocked(None)
    pygame.event.set_allowed([pygame.QUIT] + allowed)

    return screen


def draw_mappings(screen: pygame.Surface, positions: list[tuple[int, int]]) -> None:
    """Draws the positions at which click boxes have been mapped.

    positions: a list of tuples, each tuple describing the top left corner of the click box.

    Preconditions:
        - all coordinates in positions are within the screen size.
    """
    for position in positions:
        pygame.draw.rect(screen, THECOLORS['red'], (position[0], position[1],
                                                    SQUARE_SIZE, SQUARE_SIZE), 2)


def draw_path(screen: pygame.Surface, path: list[str],
              mapping: dict[str, tuple[int, int]]) -> None:
    """Draws the given path that was generated by the dijkstra algorithm.

    path: path generated by SystemMap.dijkstra method.
    mapping: dictionary containing station codes and their respective click box positions.

    Preconditions:
        - All elements in path are a valid key in mapping
        - All values in mappings are on the screen
    """
    if path == [] or path is None:
        return
    add = int(SQUARE_SIZE / 2)
    start = (mapping[path[0]][0] + add, mapping[path[0]][1] + add)
    pygame.draw.circle(screen, THECOLORS['blue'], start, 4)
    for count in range(len(path) - 1):
        cur_point = mapping[path[count]]
        next_point = mapping[path[count + 1]]
        cur_point_mod = (cur_point[0] + add, cur_point[1] + add)
        next_point_mod = (next_point[0] + add, next_point[1] + add)
        pygame.draw.line(screen, THECOLORS['blue'], cur_point_mod, next_point_mod, 10)
        pygame.draw.circle(screen, THECOLORS['blue'], next_point_mod, 4)


def draw_circle(screen: pygame.Surface, point: tuple[int, int], color: str) -> None:
    """Draws a circle at the center of the given click box's location with the given color.

    point: Position at which the circle is to be drawn
    color: a string representing the color to be used (defined by THECOLORS from pygame)
    """
    modified_point = (point[0] + int(SQUARE_SIZE / 2), point[1] + int(SQUARE_SIZE / 2))
    pygame.draw.circle(screen, THECOLORS[color], modified_point, 8)


def draw_text(screen: pygame.Surface, text: str, pos: tuple[int, int]) -> None:
    """Draw the given text to the pygame screen at the given position.
    This function has not been modified much from assignment 1 of CSC111.

    pos: represents the *upper-left corner* of the text.
    """
    font = pygame.font.SysFont('inconsolata', 22)
    text_surface = font.render(text, True, THECOLORS['black'])
    width, height = text_surface.get_size()
    screen.blit(text_surface,
                pygame.Rect(pos, (pos[0] + width, pos[1] + height)))
